name: CI/CD Pipeline

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

env:
  NODE_VERSION: '20'
  NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}
  NEXT_PUBLIC_FEATURE_COLLABORATION: ${{ secrets.NEXT_PUBLIC_FEATURE_COLLABORATION }}
  NEXT_PUBLIC_FEATURE_AI_SUGGESTIONS: ${{ secrets.NEXT_PUBLIC_FEATURE_AI_SUGGESTIONS }}
  NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
  NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
  SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
  CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}

jobs:
  quality-checks:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npm run db:generate

      - name: Type checking
        run: npm run type-check

      - name: ESLint check
        run: npm run lint

      - name: Prettier check
        run: npm run format:check

      - name: Run unit tests
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Build application
        run: npm run build

      - name: Check for console.log statements
        run: |
          if grep -r "console\.\(log\|debug\|info\|warn\)" src/ --exclude-dir=node_modules --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx"; then
            echo "‚ùå Found console.log/debug statements in production code"
            exit 1
          else
            echo "‚úÖ No console.log/debug statements found"
          fi

      - name: Check for TODO/FIXME comments
        run: |
          echo "üìù Checking for TODO/FIXME comments..."
          TODO_COUNT=$(grep -r "TODO\|FIXME" src/ --exclude-dir=node_modules --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" | wc -l || echo "0")
          if [ "$TODO_COUNT" -gt 0 ]; then
            echo "‚ö†Ô∏è Found $TODO_COUNT TODO/FIXME comments:"
            grep -r "TODO\|FIXME" src/ --exclude-dir=node_modules --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" || true
            echo "üìã Please document these in your project management system"
          else
            echo "‚úÖ No TODO/FIXME comments found"
          fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for sensitive data
        run: |
          echo "üîç Checking for potential sensitive data..."
          if grep -r "password\|secret\|key\|token" src/ --exclude-dir=node_modules --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" | grep -v "// @ts-ignore" | grep -v "placeholder" | grep -v "example"; then
            echo "‚ö†Ô∏è Potential sensitive data found - please review"
          else
            echo "‚úÖ No obvious sensitive data found"
          fi

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-checks, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--env ENVIRONMENT=staging'
          alias-domains: |
            staging-quillhaven.vercel.app

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-checks, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod --env ENVIRONMENT=production'
          alias-domains: |
            quillhaven.com
            www.quillhaven.com

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Deployment notification
        run: |
          if [ "${{ needs.deploy-staging.result }}" == "success" ] || [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "‚úÖ Deployment successful"
          else
            echo "‚ùå Deployment failed"
          fi
